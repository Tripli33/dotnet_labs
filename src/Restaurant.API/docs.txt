public async Task<IEnumerable<(string name, IEnumerable<Dish> dishes, double avgPrice)>> GetClientNameWithDishesAndAvgPrice()
{
    var clientsWithOrdersAndDishes = await Context.Clients
        .OrderBy(c => c.Name)
        .Include(c => c.Orders)
        .ThenInclude(o => o.Dish)
        .ToListAsync(); 

    return clientsWithOrdersAndDishes.Select(c =>
    (
        name: c.Name,
        dishes: c.Orders?.Select(o => o.Dish).Where(d => d != null) ?? Enumerable.Empty<Dish>(),
        avgPrice: c.Orders?.Any() == true ? c.Orders.Average(o => o.Price) : 0
    ));
}


Task<IEnumerable<(string name, IEnumerable<Dish> dishes, double avgPrice)>> GetClientNameWithDishesAndAvgPrice();

Task<Dish?> GetOrderDishByIdForClientAsync(int clientId, int orderId, bool trackChanges);

Task<Employee?> GetOrderEmployeeByIdForClientAsync(int clientId, int orderId, bool trackChanges);


migrationBuilder.Sql(@"
    CREATE TRIGGER calculate_order_price_insert
    BEFORE INSERT ON Orders
    FOR EACH ROW
    BEGIN
        DECLARE result DECIMAL(10, 2);
        
        SET result = NEW.Quantity * (
            SELECT Price FROM Dishes WHERE DishId = NEW.DishId
        );
        
        IF NEW.PaymentType != 'Card' THEN
            SET NEW.Price = ROUND(result, 2);
        ELSE
            SET result = result * (
                SELECT Sale FROM Clients WHERE ClientId = NEW.ClientId
            ) / 100;
            SET NEW.Price = ROUND(result, 2);
        END IF;
    END;");

migrationBuilder.Sql(@"
    CREATE TRIGGER calculate_order_price_update
    BEFORE UPDATE ON Orders
    FOR EACH ROW
    BEGIN
        DECLARE result DECIMAL(10, 2);
        
        SET result = NEW.Quantity * (
            SELECT Price FROM Dishes WHERE DishId = NEW.DishId
        );
        
        IF NEW.PaymentType != 'Card' THEN
            SET NEW.Price = ROUND(result, 2);
        ELSE
            SET result = result * (
                SELECT Sale FROM Clients WHERE ClientId = NEW.ClientId
            ) / 100;
            SET NEW.Price = ROUND(result, 2);
        END IF;
    END;");
    
migrationBuilder.Sql("DROP TRIGGER calculate_order_price_insert");

migrationBuilder.Sql("DROP trigger calculate_order_price_update");
